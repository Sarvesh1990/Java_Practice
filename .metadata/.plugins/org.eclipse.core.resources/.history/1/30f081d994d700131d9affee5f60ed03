import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Map;
import java.util.HashMap;
import java.util.Queue;
import java.util.Set;

public class Graph 
{
	Map<Integer, Set<Integer> > myMap;
	boolean isQueueInit = false;
	int[] myEdge = {0, -1, -1, -1, -1, -1, -1};
	int[] myPath = {0, 0, 0, 0, 0, 0, 0};

	Graph(Map<Integer, Set<Integer>> map)
	{
		myMap=map;
	}
	void Insert(int a, int b)
	{
		if(myMap.get(a)==null)
		{
			Set <Integer> mySet= new HashSet<Integer>();
			mySet.add(b);		
			myMap.put(a, mySet);
		}
		else
		{
			myMap.get(a).add(b);
		}
		System.out.println("Set is " + myMap.get(0));
	}
	
	
	Queue<Integer> myQueue = new LinkedList <Integer>();
	int count = 0;
	void initializeQueue(int a)
	{
		myQueue.add(a);
	}
	
	void bfs (int a)
	{
		if(!isQueueInit)
		{
			initializeQueue(a);
			isQueueInit=true;
		}
		while(!myQueue.isEmpty())
		{
			count=count+1;
			for(Integer myInt : myMap.get(a))
			{
				myQueue.add(myInt);
				myEdge[myInt]=a;
				myPath[myInt]=count;
			}
			myQueue.remove(a);
			//bfs(myQueue.peek());
//			/System.out.println("Now doing for " + myQueue.peek());
		}
	}
}
